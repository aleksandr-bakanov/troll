=== ТролльКонтроль (TrollControl) ===

Суть игры - проходим случайно генерируемые подземелья, попутно убивая
монстров и обходя ловушки. За прохождение получаем очки троллинга -
аналог опыта. Ролевая система - GURPS. Подземелье (уровень) генерится
сообразно силе персонажа, или персонажей, если участвует группа игроков.
То есть различной силы монстры и количество (сложность) ловушек.
Много троллинга игроков со стороны AI и самих игроков :-). Собственно
стилистика рисунков берется с comicsbook. При создании персонажа ему
можно определить внешность. Согласно GURPS с уровнем можно получать
плюшки-перки. И покупать всякую экипировку. Цель - стать троллем
с уровнем троллинга over 9000! Если качественно реализовать случайное
генерение карт, то игра может стать бесконечной. Далее можно будет
добавлять новых мобов, оружие, ловушки, перки и прочий троллинг.


=== Более формальное описание ===

Бой происходит на гексагональной сетке. Присутствует туман войны. При
этом если играет группа, то что видит один, видят и остальные. В начале
каждого хода игрок может пойти куда-либо на расстояние равное
базовой скорости БС = (ЗД + ЛВ) / 4). Для перемещения игроку предостав-
ляются все доступные для его БС клетки. Путь расчитывается алгоритмом
A*. По-умолчанию клик по клетке означает желание игрока перейти в
данную клетку. По-умолчанию игрок убирает туман войны в радиусе 5 клеток
от себя. Если игрок приближается к мобу на расстояние достаточное, 
чтобы моб его учуял, моб начинает действовать. В первой редакции игроку
будут доступны следующие действия:
	- перемещение
	- атака текущим оружием
	- смена оружия
	- взаимодействие с предметами
Под взаимодействием с предметами подразумевается: открыть дверь, нажать
на кнопку, обезвредить ловушку.
Если у игрока есть перка "Обнаружение ловушек", то клетки с ловушками
будут подсвечиваться для него красным. Кнопки могут быть как ловушками,
так и открывать двери, через которые игрок должен пройти. Задания
на уровень будут различны:
	- убить всех человеков
	- дойти до определенного места на карте
	- не дать убить кого-либо из своей команды и довести его куда-нибудь
	- убить босса
	- выжить в течении некоторого количества раундов
Тип уровня выбирается случайным образом.
При создании персонажа будет даваться 50 очков к распределению.
По-умолчанию параметры сила (СЛ), ловкость (ЛВ), интеллект (ИН),
и здоровье (ЗД) равны 10. Перки тоже будут иметь стоимость в очках.
Начальный капитал игрока будет 100 тролов. На них можно будет купить
какую-нибудь простую броню и простое оружие.
Общая прокаченность (ОП) персонажа складывается из очков потраченных
на прокачку. Например, Вася: СЛ=12, ЛВ=13, ИН=10, ЗД=10, перки:
"Обнаружение ловушек [5]", "Обезвреживание ловушек [15]". Вася потратил
СЛ(20) + ЛВ(60) + перки(5 + 15) = 100 очков на прокачку.
Если игрока убивают во время прохождения уровня он переключается
в режим наблюдения за другими игроками партии. При этом он может
выбирать за каким игроком наблюдать. После смерти игрок может выйти
из уровня (все равно там он больше ничего не сможет сделать). При этом
вернуться в этот же уровень он не сможет. Если у игрока происходит
дисконнект, он умирает (да, вот так вот просто решается проблема
дисконнекта). Если игрок создает заявку на групповой бой (групповое
прохождение уровня), то в эту заявку могут добавится игроки с ОП равной
ОП игрока создавшего заявку ±5 очков. Заявка висит пять минут.
В групповом бое может участвовать максимум 6 игроков. Если заявка
к окончанию пяти минут набрала хотя бы одного игрока уровень стартует.
Уровень создается сообразно суммарной силе группы игроков. Игрок
создавший заявку может из нее выйти. Если из заявки выходит последний
игрок, заявка удаляется. Как и в суровой реальности frendly fire
всегда включен. О ловушках игрокам ничего не рассказывается, пусть
сами все открывают. Плюшки за прохождение уровня: каждому игроку
причитаеся по 25 тролов и 1 очку ОП. Если игрока убили он получает
10 тролов и 0 очков ОП. Однако если игрок отключился, он не получает
ничего. На заявку можно поставить пароль, чтобы ограничить доступ в нее
всем кому не лень.
Все мобы идут под номерами. В смысле не имеют имен. Например troll#1,
troll#43 и так далее. У каждого индивидуальные характеристики. Моб
описывается четыремя параметрами (СЛ, ЛВ, ИН, ЗД), броней, двумя
оружиями и набором перк. При этом нужно научить мобов пользоваться
этими перками. В первой редакции от перк для мобов можно отказаться.
Изначально у игрока есть шкала усталости в 100 очков. Прохождение
каждого уровня требует 25 очков усталости (ОУ). ОУ восстанавливаются
со скоростью 1 ОУ/мин.
Некоторые стены можно ломать.
--- Перки ---
	- Обнаружение ловушек [5]. Если в поле зрения игрока имеются
ловушки, каждый ход делается бросок ИН на их обнаружение. Обнаруженная
ловушка подсвечивается красным. В каждой ловушке прописан модификатор
броска. Если игрок обнаруживает ловушку, ее видит только он.
	- Обезвреживание ловушек [15]. Игрок не может обезвредить ловушку,
которую он не видит. На обезвреживание делается бросок ЛВ. В каждой
ловушке прописан модификатор броска.
	- Обзор +1 [20]. Увеличение радиуса обзора на 1.
--- Оружие ---
	- Пистолет. Дальность - 7. Повреждения 1к (1d6). 50$.
--- Броня ---
	- Броня. Сопротивление (поглощение) повреждениям (СП) - 2. Вес - 15.
50$.
--- Ловушки ---
	- По лбу ложкой. Damage 3.
	- Телепорт. Перемещает игрока в случайное место на карте.
	- Монетный тролль. Случайный игрок из партии лишается половины
сбережений.
	- Пацифизм. До конца уровня damage, наносимый игроком, снижается
до единицы.
--- Мобы ---
	- troll#1. СЛ=10, ЛВ=10, ИН=10, ЗД=10, оружие - пистолет. Единицы
жизней (ЕЖ) = СЛ = 10. ОП = 30. ОП описывают уровень моба. Также
они используются при создании уровня.

Система должна умным образом уметь создавать уровни. Например так.
Считаются суммарные ОП игроков входящих в группу (Σ). Каждая ловушка
и каждый моб описаны в терминах ОП. Система создает на уровне столько
мобов и ловушек, чтобы их суммарные ОП не превышали Σ. Карта может
строится несколькими путями. Например поле WxH разбивается стенами
на комнаты. В любом случае поле уровня суть прямоугольная гексовая
карта размером WxH. Ячейка поля может быть свободной, стеной, дверью.
Ячейка (стена, дверь) может быть разрушаемой и нерушимой. Если она
разрушаема у нее есть некоторое количество ЕЖ. Чем больше Σ тем больше
W и H. И возможно более запутанное расположение стен. Дверь может быть
открыта или закрыта. Если дверь закрыта, где-то на уровне должна быть
кнопка, открывающая эту дверь. При этом расположение таких дверей
и кнопок должно позволять пройти уровень. То есть не нужно запирать
игроков за нерушимыми стенами и требовать от них дойти до какой-нибудь
точки на карте, куда им ну никак не попасть. Это конечно тонкий
троллинг, но не по правилам.

Про интерфейс. Должны быть следующие окна. Окно логина,
в котором должны присутствовать два поля ввода - логин и пароль,
и три кнопки [Go!], [Создать аккаунт] и [Играть гостем]. Кнопка [Go!]
работает только в случае если поля логин и пароль заполнены. При
нажатии на нее на сервер отправляется запрос на подключение. Если
Пара логин/пароль существуют в базе данных и соответствуют друг
другу, игрок успешно заходит в игру. Если такой пары нет или логин
не соответствует паролю, игроку отправляются наилучшие пожелания.
Кнопка [Создать аккаунт] открывает окно создания персонажа. Кнопка
[Играть гостем] создает уровень соответствующий игроку начального
уровня, т.е. с невысокими (или вообще нулевыми) ОП. То есть просто
проба пера. Еще в окне логина может присутствовать флажок [Запомнить],
включение которого запоминает введенные значения логина и пароля,
и подставляет их при очередном запуске приложения.
Окно регистрации (создания персонажа). Должна быть возможность выбрать
аватар, указать ник (он же логин) и пароль (полей ввода пароля два),
распределить ОП, и купить оружие и броню. Перки сразу давать не будем.
Ник должен состоять из кириллических или латинских символов и не
превышать 16 символов. Пароль может состоять из того же из чего
состоит ник, плюс пунктуация и цифры, также не должен превышать 16
символов. Выбрать аватар можно из ограниченного количество предлагаемых
картинок. ОП можно распределить позже в соответствующем окне. Броню
и оружие тоже можно не покупать. Помимо полей отображающих СЛ, ЛВ, ИН
и ЗД должны быть поля отображающие вторичные параметры персонажа: БС,
ЕЖ, уклонение.
После входа в игру игрок попадает в Основное окно. Здесь присутствуют
кнопки открывающие прочие окна - окно прокачки, окно инвентаря, окно
магазина, одиночное прохождение уровня, окно создания заявки. Основную
площадь окна занимает список активных заявок. Также где-нибудь
располагается аватар игрока, его ОП (задействованные) и троллы.
Окно прокачки. Здесь присутствуют все параметры персонажа а также два
списка перок: первый - те, которые уже взял игрок, второй - те, которые
еще может взять. При наведении на перку во всплывающем окне отображается
ее описание. При наличии неизрасходованных ОП, их можно распределить,
нажимая на кнопку [+] рядом с каждой из основных четырех характеристик.
Также те перки, которые доступны для взятия должны быть каким-либо
образом выделены (например подсвеченным фоном).
Окно инвентаря. Здесь присутствует список предметов, имеющихся у игрока.
Также есть три слота, куда можно поместить два оружия и броню. При
наведении на предмет в списке, во всплывающем окне отображается
подробная информация о нем.
Окно магазина. Два списка: слева инвентарь игрока, справа магазин.
При клике по предмету в инвентаре появляется окно с вопросом
о подтверждении продажи. То же самое с покупкой. Продажа происходит
за 20% от базовой стоймости предмета (но не менее 1 тролла). Также как
и в инвентаре при наведении мышкой на предмет в списке, во всплывающем
окне отображается подробная информация о нем. Где-нибудь отображается
текущий баланс игрока.
Окно создания заявки. Три поля ввода: имя (заголовок) заявки, пароль,
количество игроков (от 2 до 6). Кнопка [Создать]. 
Кнопка [Одиночное прохождение уровня] сразу запускает уровень на одного
игрока.
Еще про основное (главное) окно (окно заявок). На заявке в списке
указывается ее название, уровень ОП создателя заявки, количество
ожидаемых игроков, количество игроков зашедших в заявку, время
до старта в формате mm:ss (или просто минуты, чтобы часто не обновлять).
Фактически игроку выводятся те заявки, в которые он может вступить.
При нажатии на заявку игрок вступает в нее, если есть свободные места.
Если игрок, зашедший в заявку занял не последнее свободное место,
где-нибудь появляется кнопка [Выйти из заявки]. Если игрок занял
последнее свободное место, заявка стартует.

Про уровни. При прохождении уровня группой игроков включается чат, где
группа может вести светские беседы. Мертвые могут продолжать флудить
в чате. Над персонажами отображаются их ники. Порядок игроков
определяется в начале уровня. Как только кто-нибудь из партии набредает
на моба, моб вклинивается в порядок передачи хода сообразно своей БС.

Про организацию данных.
Игрок описывается следующими данными: ник, пароль, СЛ, ЛВ, ИН, ЗД, ЕЖ,
БС, ЕУ (энергия), набор перок, рюкзак, оружие в руках, оружие на поясе,
броня, штаны, деньги, потраченные ОП, непотраченные ОП, уклонение,
максимальный груз, id игрока, ОД, СП.
Оружие описывается следующими данными: цена, вес, повреждения, точность,
радиус атаки, радиус урона (например, граната), ОД для использования,
id предмета (оружия).
Броня описывается следующими данными: цена, вес, СП (сопротивление
повреждениями, т.е. их поглощение), id предмета.
Рюкзак: набор пар id:count, где id - id предмета, count - количество.
Перки: набор id перок. Сама перка описывается влиянием на параметры
персонажа, например +2 ОД. Но есть и такие, которые влияют на логику
ведения боя. Наример "Обнаружение ловушек" - если у игрока есть такая
перка мы должны, при разведывании им уровня, делать броски на
обнаружение ловушек, находящихся в радиусе его видимости. Активные перки
также имеют ОД, которые нужно потратить на их использование.
Карта уровня: двумерный массив ячеек (опа, пришла идея о многоэтажных
уровнях, но пока ограничимся одним этажом).
Ячейка уровня: тип ячейки (пол, стена, дверь), ЕЖ стены (если она
разрушаема, если нет - ЕЖ = 0), id двери, id ключа (если на ячейке
расположен ключ, открывающий дверь), id ловушки (если на ячейке есть
ловушка. Ловушка активизируется если персонаж наступает на ячейку, или
взаимодействует с ячейкой).
Ловушки: id ловушки. Так как ловушки предполагаются разнообразными,
не вижу смысла их систематизировать. В конце концов это будет некая
функция, которая будет каким-то образом обрабатывать карту уровня,
игроков и т.д. Да еще сложность обнаружения и сложность обезвреживания.

Более структурированно:
--- Игрок ---
	- ник (nickname)
	- пароль (password)
	- СЛ (сила) (strength)
	- ЛВ (ловкость) (dexterity)
	- ИН (интеллект) (intellect)
	- ЗД (здоровье) (health)
	- БС (базовая скорость) (speed)
	- ЕУ (энергия) (energy)
	- ЕЖ (жизни) (hitPoints)
	- перки (perks)
	- рюкзак (backpack)
	- оружие в руках (handWeapon)
	- оружие на поясе (beltWeapon)
	- броня (armour)
	- штаны (pants)
	- деньги (money)
	- потраченные ОП (usedOP)
	- непотраченные ОП (unusedOP)
	- уклонение (deviation)
	- максимальный груз (load)
	- id игрока
	- ОД (actPoints)
	- СП (resistance)
--- Оружие ---
	- id
	- цена (cost)
	- вес (weight)
	- повреждения (damage)
	- точность (precision)
	- радиус атаки (range)
	- радиус урона (damageRange)
	- ОД (points)
--- Броня ---
	- id
	- цена (cost)
	- вес (weight)
	- СП (resistance)
--- Перки ---
	- id
	- ОД
--- Ячейка ---
	- тип (type)
	- ЕЖ (жизни) (hitPoints)
	- id двери (door)
	- id ключа (key)
	- id ловушки (trap)
--- Ловушка ---
	- id
	- сложность обнаружения (detection)
	- сложность обезвреживания (defusing)

Нужно отметить, что персонаж не может хранить в рюкзаке столько
предметов, что их суммарный вес превышает максимальный груз (БГ -
базовый груз). Если рюкзак заполнен на 80-90% у игрока отнимается 1 ОД,
90-100% - 2 ОД.

Про базу данных.
Нужно понять какие следует создать таблицы и спроектировать структуру
этих таблиц.
--- Таблица user ---
Таблица содержит информацию о зарегистрированных пользователях. Состоит
из столбцов:
	- id пользователя
	- nick (логин)
	- password (в MD5)
	- params (параметры игрока в JSON)
	-- strength
	-- dexterity
	-- intellect
	-- health
	-- energy (значение энергии на момент выхода из игры)
	-- perks (список id перок)
	-- backpack (список пар id:count)
	-- handWeapon (id оружия)
	-- beltWeapon
	-- armour (id брони)
	-- pants
	-- money
	-- usedOP
	-- unusedOP
	-- lastVisit - время ухода из игры
Остальные параметры игрока расчитываются из данных параметров и нет
смысла хранить их в базе.
--- Таблица items ---
Таблица содержит информацию об оружии и броне.
	- id
	- params (JSON)
	-- name
	-- cost
	-- weight
	-- damage
	-- precision
	-- range
	-- damageRange
	-- points
	-- resistance
--- Таблица perks ---
Таблица содержит информацию о перках.
	- id
	- params (JSON)
	-- name
	-- points (ОД)
	-- cost (ОП)
--- Таблица traps ---
Таблица содержит информацию о ловушках.
	- id
	- params (JSON)
	-- name (название ловушки)
	-- detection
	-- defusing

Словестное описание FightController'а.
Это такой класс, который осуществляет контроль над проводимым боем.
Он должен создать карту уровня, разместить на ней игроков, мобов
и ловушки. Потом он должен сообщить клиентам ровно столько сколько им
положено знать. Потом определить порядок хода игроков и начать игру.
Нам известно, что контроллер должен создавать уровень исходя
из суммарного ОП участников боя (игроков). Должна быть возможность
задать размеры уровня и количество этажей. При этом размерность этажей
может быть различной.
Ячейка поля - это либо пол, либо стена, либо дверь. Стена может быть
разрушаемой. На любой ячейке может быть установлена ловушка. На любой
ячейке может быть установлен рычаг (кнопка) открывающий дверь.
Для открытия двери может требоваться активация нескольких рычагов.
Один рычаг может открывать несколько дверей.
Игрокам сообщается о передвижении моба только если моб находится
в пределах видимости игроков. После каждого завершения хода игрока
следует проверять не находится ли кто-нибудь из игроков в пределах
чутья кого-нибудь из мобов. Если находиться следует включить этого моба
в порядок ходов согласно его speed (разумеется если этот моб уже
не включен в порядок ходов).
Еще на клетке может находится переход на другой этаж. В этом переходе
должно быть указано на какой этаж он ведет и в какие координаты.