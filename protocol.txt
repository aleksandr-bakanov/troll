========================================================================
	Общее
========================================================================
Все команды начинаются с 4-байтового целого, которое указывает на длину
оставшейся части команды. Затем следует 2-байтовый id команды, после
которого идут байты (ноль или более) специфичные для каждой команды.
Любая каверза в присланных данных со стороны клиента карается
отключением оного.

========================================================================
	Server side commands
========================================================================
Здесь описываются команды отправляемые сервером клиенту.

1	- S_TRACE. Клиент должен вывести присланное сообщение в отладчик.
	Params:
		message [string]

3	- S_LOGIN_FAILURE. Сообщаем клиенту о том, что обработка последней
	команды C_LOGIN, полученной от него, завершилась неудачей.
	Params:
		reason [1]:
			1 - нет записи в базе данных
			2 - is_playing == 1

5	- S_REGISTER_SUCCESS. Клиент успешно зарегистрирован в системе.

7	- S_REGISTER_FAILURE. Регистрация не удалась. Причина указана
	в параметре команды. Если длина логина, присланного клиентом,
	превышает 16 символов, то он идет лесом. То же в отношении неверных
	параметров персонажа.
	Params:
		reason [1]:
			1 - логин уже занят
			2 - логин не прошел проверки регулярным выражением

9	- S_LOGIN_SUCCESS. Клиент успешно залогинился в системе.

11	- S_FULL_PARAMS. Отправка клиенту полных параметров персонажа.
	Params:
		id [4]
		name [string]
		params [string] (JSON)

13	- S_ITEM_INFO. Сервер отправляет клиенту информацию о предмете.
	Params:
		id [2]
		params [string] (JSON)

15	- S_SHOP_ITEMS. Отправка клиенту параметров всех предметов, чтобы
	он мог отобразить содержимое магазина.
	Params:
		items [string] (JSON) - json выглядит так:
		{ "id": {...params...}, "id": {...params...}, ... }

17	- S_ADD_ITEM. Добавить в рюкзак предмет.
	Params:
		id [2]
		count [1]

19	- S_CLIENT_MONEY. Клиенту сообщается сколько у него денег.
	Params:
		money [4]

21	- S_NEW_BID. Клиент извещается о появлении новой заявки.
	Params:
		id [2]
		op [2]			- очки прокачки создателя заявки
		count [1]		- максимальное количество игроков
		cur_count [1]	- текущее количество игроков
		name [string]	- имя заявки

23	- S_REMOVE_BID. Клиент извещается об удалении заявки.
	Params:
		id [2]

25	- S_UPDATE_BID. Клиенту сообщается о текущем количестве игроков
	в указанной заявке. Эта команда отправляется сервером, когда
	кто-нибудь заходит в заявку или выходит из нее. Возможно, эта
	команда в дальнейшем будет заменена на менее тяжелую по трафику.
	Params:
		id [2]
		count [1]

27	- S_START_FIGHT_INFO. Клиенту сообщаются начальные данные боя.
	Координаты игроков, порядок ходов.
	Предположительно может возникнуть такая ситуация, что игроки
	начинают бой на разных этажах. Клиенту не сообщается заранее сколько
	всего на уровне этажей. Также клиенту не сообщаются размеры этажей.
	Params:
		players_count [1]
			player_id [1]
			player_floor_id [1]
			player_x [2]
			player_y [2]
		move_order [players_count] - последовательность id игроков.
		your_id [1] - id игрока, которому отправляется команда.
	Если очередной player_id == -1, то про этого игрока ничего
	не известно и вообще его не существует. Скорее всего он каким-то
	хитрым образом успел покинуть игру еще до начала боя.

29	- S_AREA_OPEN. Клиенту присылается информация об открытых ячейках.
	Params:
		floors_count [1]:
			floor_id [1]
			cells_count [2]:
				cell_x [2]
				cell_y [2]
				cell_type [1]
				cell_params [0-n]
	Необходимые пояснения. floors_count - количество этажей, описанных
	в команде. cells_count - количество ячеек, известных игрокам
	на этаже с id = floor_id. cell_params - дополнительные параметры
	ячейки, зависящие от cell_type: если cell_type = CT_FLOOR,
	то это пол, а на полу может располагаться телепорт. В данном случае
	на cell_type следуют toFloor[1], toX[2], toY[2], причем если toFloor
	равен -1, параметры toX, toY не передаются (это означает, что ячейка
	является просто полом).
	Если cell_type = CT_WALL, то указывается параметр прочности стены -
	wall_hp. Если wall_hp = -1, то стена нерушима. За wall_hp указывается
	key_id[2] - id ключа, помещенного на этой стене. Если key_id равен
	-1, то ключ отсутствует.
	Если cell_type = CT_DOOR, то далее указывается количество ключей,
	требуемых для открытия двери keys_count[2] и id key_id[2] этих
	ключей.

31	- S_KEYS_OPEN. Клиенту присылается информация об открытых ключах.
	Params:
		floors_count [1]:
			floor_id [1]
			keys_count [2]:
				key_id [2]
				key_x [2]
				key_y [2]

33	- S_CHAT_MESSAGE. Клиенту следует вывести присланное сообщение
	в боевой чат.
	Params:
		message [string]

35	- S_FINISH_FIGHT. Окончание боя. Позже здесь появятся параметры,
	описывающие результаты боя.

37	- S_YOUR_MOVE. Игроки извещаются о начале следующего хода. Параметр
	unit_id указывает на то, чей сейчас ход. Параметр seconds указывает
	на продолжительность хода.
	Params:
		unit_id [1]
		seconds [1]

39	- S_MOVE_UNIT. Указанный юнит перемещается по указанному маршруту.
	Params:
		unit_id [1]
		steps_count [1]:
			x [2]
			y [2]

41	- S_UNIT_CHANGE_WEAPON. Указанный юнит меняет оружие. Возможно сюда
	будет добавлен тип оружие, который появляется в руках юнита, а может
	эта информация будет отправляться заранее в самом начале боя.
	Params:
		unit_id [1]

43	- S_UNIT_ATTACK. Юнит атакует указанную клетку.
	Params:
		unit_id [1]
		x [2]
		y [2]

45	- S_UNIT_DAMAGE. Юниту с указанным id наносятся повреждения. Если
	unit_id == -1, то за этим параметром следуют координаты ячейки,
	которой наносятся повреждения.
	Params:
		unit_id [1]
			floor_id [1]
			cell_x [2]
			cell_y [2]
		damage [1]

47	- S_UNIT_ACTION.
	Params:
		unit_id [1]
		x [2]
		y [2]

49	- S_CHANGE_CELL. Изменение статуса ячейки поля. Например после
	разрушения стены, ячейка становится проходимым полом. Возможно,
	в зависимости от параметра type в команде будут дополнительные
	параметры.
	Params:
		floor_id [1]
		cell_x [2]
		cell_y [2]
		type [1]

51	- S_TELEPORT_UNIT. Мгновенное перемещение юнита в указанные
	координаты.
	Params:
		unit_id [1]
		floor_id [1]
		cell_x [2]
		cell_y [2]

========================================================================
	Client side commands
========================================================================
Здесь описываются команды отправляемые клиентом серверу.

2	- C_LOGIN. Клиент набрал в окне логина пару логин/пароль и желает
	зайти в игру. Мы должны проверить: существует ли такая пара
	логин/пароль, не играет ли уже игрок с такой парой, потому что если
	создать два контроллера, одновременно управляющих игроком, возникнет
	путаница.
	Params:
		логин [string]
		пароль [string]
	Здесь и далее в квадратных скобках после параметра команды будет
	указываться количество байт, отведенных под параметр. [string]
	означает, что передается строка, которая в свою очередь записывается
	так: сначала идут 2 байта указывающие на длину в байтах следующей
	за ними строки. Строка передается в UTF-8. Кстати, с этими строками
	нужно быть аккуратней. Например, еретический клиент может прислать
	нам строку 'abc' указав перед ней длину большую трех. За этим нужно
	следить.

4	- C_REGISTER. Клиент регистрируется в системе. Если параметры,
	присланные им верны, нужно завести запись в базе данных.
	Params:
		login [string]
		password [string]
		strength [1]
		dexterity [1]
		intellect [1]
		health [1]

6	- C_ITEM_INFO. Клиент запрашивает информацию о предмете.
	Params:
		id [2]

8	- C_WEAR_ITEM. Игрок одевает или снимает предмет.
	Params:
		id [2] - id предмета
		wear [1] - true - одевает, false - снимает
		place [1] - ячейка
			1 - armour
			2 - pants
			3 - hand weapon
			4 - belt weapon

10	- C_DROP_ITEM. Игрок выбрасывает предмет. Если в рюкзаке игрока
	больше одного такого предмета, выбрасывается один. Если у игрока
	две фуфайки, одна из которых одета, выбрасывается неодетая.
	Если клиент хитрый и у него и в руках и на поясе одето одинаковое
	оружие и он, посылая серверу команду C_DROP_ITEM, выбрасывает
	одно из этих оружий, но параметр place указывает равным 0, то сервер
	тоже хитрый. В этом случае сервер снимает одетый предмет в следующем
	порядке: "armour", "pants", "handWeapon", "beltWeapon". То есть
	в какой ячейке первой произошло совпадение с id выбрасываемого
	предмета, та ячейка и освобождается.
	Params:
		id [2] - id предмета
		place [1] - если предмет не был одет = 0,
		иначе см. C_WEAR_ITEM

12	- C_BUY_ITEM. Игрок хочет купить предмет в магазине.
	Params:
		id [2]

14	- C_SELL_ITEM. Игрок хочет продать один предмет в магазин.
	Params:
		id [2]

16	- C_ADD_STAT. Игрок хочет увеличить один из базовых статов на 1.
	Если у игрока достаточно ОП, стат будет увеличен. Если недостаточно,
	запрос будет проигнорирован (а в последствии, возможно, приход такой
	команды при нехватке ОП будет караться отключением). Сервер никак
	не оповещает клиента в случае успешного выполнения запроса. Может
	в будущем и будет оповещать. В конце концов используется TCP, что
	гарантирует доставку команд. Однако это не гарантирует быструю
	доставку. Надо об этом подумать.
	Params:
		stat [1]
			1 - сила
			2 - ловкость
			3 - интеллект
			4 - здоровье

18	- C_ENTER_BID. Игрок хочет вступить в заявку с указанным id.
	Params:
		id [2]

20	- C_EXIT_BID. Игрок хочет выйти из заявки. Id заявки, в которой
	состоит игрок, запоминается сервером, поэтому нет необходимости
	присылать в данной команде id заявки.

22	- C_CREATE_BID. Игрок хочет создать заявку на указанное количество
	игроков. Пока не будем делать пароль на заявку.
	Params:
		count [1]
		name [string]	- максимум 16 символов

24	- C_CHAT_MESSAGE. Игрок отправляет сообщение в боевой чат.
	Params:
		message [string]

26	- C_WANT_MOVE. Игрок изъявляет желание перейти в указанные
	координаты.
	Params:
		x [2]
		y [2]

28	- C_CHANGE_WEAPON. Игрок меняет оружие.

30	- C_ATTACK. Игрок атакует указанные координаты текущим оружием.
	Params:
		x [2]
		y [2]

32	- C_ACTION. Игрок совершает действие по отношению к указанной ячейке.
	Если это дверь, то делается попытка открыть ее. Если кнопка - нажать.
	Если переход между этажами - совершается переход.
	Params:
		x [2]
		y [2]
