========================================================================
	Общее
========================================================================
Все команды начинаются с 4-байтового целого, которое указывает на длину
оставшейся части команды. Затем следует 2-байтовый id команды, после
которого идут байты (ноль или более) специфичные для каждой команды.
Любая каверза в присланных данных со стороны клиента карается
отключением оного.

========================================================================
	Server side commands
========================================================================
Здесь описываются команды отправляемые сервером клиенту.

1	- S_TRACE. Клиент должен вывести присланное сообщение в отладчик.
	Params:
		message [string]

3	- S_LOGIN_FAILURE. Сообщаем клиенту о том, что обработка последней
	команды C_LOGIN, полученной от него, завершилась неудачей.
	Params:
		reason [1]:
			1 - нет записи в базе данных
			2 - is_playing == 1

5	- S_REGISTER_SUCCESS. Клиент успешно зарегистрирован в системе.

7	- S_REGISTER_FAILURE. Регистрация не удалась. Причина указана
	в параметре команды. Если длина логина, присланного клиентом,
	превышает 16 символов, то он идет лесом. То же в отношении неверных
	параметров персонажа.
	Params:
		reason [1]:
			1 - логин уже занят
			2 - логин не прошел проверки регулярным выражением

9	- S_LOGIN_SUCCESS. Клиент успешно залогинился в системе.

11	- S_FULL_PARAMS. Отправка клиенту полных параметров персонажа.
	Params:
		id [4]
		name [string]
		params [string] (JSON)

13	- S_ITEM_INFO. Сервер отправляет клиенту информацию о предмете.
	Params:
		id [2]
		params [string] (JSON)

15	- S_SHOP_ITEMS. Отправка клиенту параметров всех предметов, чтобы
	он мог отобразить содержимое магазина.
	Params:
		items [string] (JSON) - json выглядит так:
		{ "id": {...params...}, "id": {...params...}, ... }

17	- S_ADD_ITEM. Добавить в рюкзак предмет.
	Params:
		id [2]
		count [1]

19	- S_CLIENT_MONEY. Клиенту сообщается сколько у него денег.
	Params:
		money [4]

========================================================================
	Client side commands
========================================================================
Здесь описываются команды отправляемые клиентом серверу.

2	- C_LOGIN. Клиент набрал в окне логина пару логин/пароль и желает
	зайти в игру. Мы должны проверить: существует ли такая пара
	логин/пароль, не играет ли уже игрок с такой парой, потому что если
	создать два контроллера, одновременно управляющих игроком, возникнет
	путаница.
	Params:
		логин [string]
		пароль [string]
	Здесь и далее в квадратных скобках после параметра команды будет
	указываться количество байт, отведенных под параметр. [string]
	означает, что передается строка, которая в свою очередь записывается
	так: сначала идут 2 байта указывающие на длину в байтах следующей
	за ними строки. Строка передается в UTF-8. Кстати, с этими строками
	нужно быть аккуратней. Например еретический клиент может прислать
	нам строку 'abc' указав перед ней длину большую трех. За этим нужно
	следить.

4	- C_REGISTER. Клиент регистрируется в системе. Если параметры,
	присланные им верны, нужно завести запись в базе данных.
	Params:
		login [string]
		password [string]
		strength [1]
		dexterity [1]
		intellect [1]
		health [1]

6	- C_ITEM_INFO. Клиент запрашивает информацию о предмете.
	Params:
		id [2]

8	- C_WEAR_ITEM. Игрок одевает или снимает предмет.
	Params:
		id [2] - id предмета
		wear [1] - true - одевает, false - снимает
		place [1] - ячейка
			1 - armour
			2 - pants
			3 - hand weapon
			4 - belt weapon

10	- C_DROP_ITEM. Игрок выбрасывает предмет. Если в рюкзаке игрока
	больше одного такого предмета, выбрасывается один. Если у игрока
	две фуфайки, одна из которых одета, выбрасывается неодетая.
	Если клиент хитрый и у него и в руках и на поясе одето одинаковое
	оружие и он, посылая серверу команду C_DROP_ITEM, выбрасывает
	одно из этих оружий, но параметр place указывает равным 0, то сервер
	тоже хитрый. В этом случае сервер снимает одетый предмет в следующем
	порядке: "armour", "pants", "handWeapon", "beltWeapon". То есть
	в какой ячейке первой произошло совпадение с id выбрасываемого
	предмета, та ячейка и освобождается.
	Params:
		id [2] - id предмета
		place [1] - если предмет не был одет = 0,
		иначе см. C_WEAR_ITEM

12	- C_BUY_ITEM. Игрок хочет купить предмет в магазине.
	Params:
		id [2]

14	- C_SELL_ITEM. Игрок хочет продать один предмет в магазин.
	Params:
		id [2]

16	- C_ADD_STAT. Игрок хочет увеличить один из базовых статов на 1.
	Если у игрока достаточно ОП, стат будет увеличен. Если недостаточно,
	запрос будет проигнорирован (а в последствии, возможно, приход такой
	команды при нехватке ОП будет караться отключением). Сервер никак
	не оповещает клиента в случае успешного выполнения запроса. Может
	в будущем и будет оповещать. В конце концов используется TCP, что
	гарантирует доставку команд. Однако это не гарантирует быструю
	доставку. Надо об этом подумать.
	Params:
		stat [1]
			1 - сила
			2 - ловкость
			3 - интеллект
			4 - здоровье
